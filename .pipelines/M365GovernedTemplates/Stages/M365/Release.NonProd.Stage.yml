parameters:
- name: stage
  type: stage

- name: serviceTreeId
  type: string

- name: serviceGroupName
  type: string
  
- name: workload
  type: string

- name: allowedStageTypes
  type: object
  default:  
    - deployment
    - nonDeployment

- name: allowedWorkloads
  type: object
  default:
    - Substrate
    - SPO
    - OfficeOnline
    - IC3
    - Teams
    - Outlook

stages:

- ${{ if eq(parameters.serviceTreeId, '') }}:
    - 'Required Pipeline parameter, serviceTreeId, is not defined': error

- ${{ if eq(parameters.serviceGroupName, '') }}:
    - 'Required Pipeline parameter, serviceGroupName, is not defined': error

- ${{if ne(containsValue(parameters.allowedWorkloads, parameters.workload), true)}}:
    - '${{parameters.workload}} is not allowed. Allowed values of workload: Substrate, SPO, OfficeOnline, IC3, Teams, Outlook': error

- ${{ if and(not(startswith(parameters.stage.stage, 'Dev_')), not(startswith(parameters.stage.stage, 'Prod_')), not(startswith(parameters.stage.stage, 'PPE_')), not(startswith(parameters.stage.stage, 'Test_')), not(startswith(parameters.stage.stage, 'Gcc_')), not(startswith(parameters.stage.stage, 'Gcch_')), not(startswith(parameters.stage.stage, 'Dod_')), not(startswith(parameters.stage.stage, 'Gal_')), not(startswith(parameters.stage.stage, 'USSec_')), not(startswith(parameters.stage.stage, 'USNat_')))}}:
  - 'Stage name ${{ parameters.stage.stage }} is not supported. The stage name prefix represent the cloud and it needs to start with: Dev_, PPE_, Test_, Prod_, Gcc_, Gcch_, Dod_, Gal_, USSec_, USNat_': error

- ${{ if or(startswith(parameters.stage.stage, 'Dev_'), startswith(parameters.stage.stage, 'Test_'))}}:
  - 'Stage name ${{ parameters.stage.stage }} is not supported currently. Dev_, Test_ will be supported soon' : error

- stage: ${{ parameters.stage.stage }}
  displayName: ${{ parameters.stage.displayName }}
  ${{ if ne(join(parameters.stage.dependsOn, ','), '') }}:
    dependsOn: ${{ parameters.stage.dependsOn }}
  ${{ if ne(parameters.stage.condition, '') }}:
    condition: ${{ parameters.stage.condition }}
  variables: 
  - ${{ if ne(parameters.stage.variables, '') }}:
    - ${{ each v in parameters.stage.variables }}:
      - ${{ if ne(v.key, '') }}:
        - name: ${{ v.key }}
          value: ${{ v.value }}
      - ${{ else }}:
        - ${{ insert }}: ${{ v }}
  - ${{ if eq(variables.namespace_ring_json, '') }}:
    - name: service_type
      value: modelD
  - ${{ else }}:
    - name: service_type
      value: modelD2
  - ${{ if startswith(parameters.stage.stage, 'Prod_') }}:
    - name: cloud_name
      value: Public
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: Production
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'PPE_') }}:
    - name: cloud_name
      value: Public
    - name: release_environment
      value: ppe   
    - name: ev2_environment
      value: Production
    - name: phase
      value: NonProd
  - ${{ elseif startswith(parameters.stage.stage, 'Test_') }}:
    - name: cloud_name
      value: Public
    - name: release_environment
      value: test
  - ${{ elseif startswith(parameters.stage.stage, 'Dev_') }}:
    - name: cloud_name
      value: Public
    - name: release_environment
      value: dev
  - ${{ elseif startswith(parameters.stage.stage, 'Gcc_') }}:
    - name: cloud_name
      value: Gcc
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: Fairfax
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'Gcch_') }}:
    - name: cloud_name
      value: Gcch
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: Fairfax
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'Dod_') }}:
    - name: cloud_name
      value: Dod
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: Fairfax
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'Gal_') }}:
    - name: cloud_name
      value: Gal
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: Mooncake
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'USSec_') }}:
    - name: cloud_name
      value: USSec
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: USSec
    - name: phase
      value: Prod
  - ${{ elseif startswith(parameters.stage.stage, 'USNat_') }}:
    - name: cloud_name
      value: USNat
    - name: release_environment
      value: prod
    - name: ev2_environment
      value: USNat
    - name: phase
      value: Prod
  
  - ${{if ne(containsValue(parameters.allowedStageTypes, variables.stage_type), true)}}:
    - '${{variables.stage_type}} is not allowed. Allowed values of stage_type: deployment, nonDeployment': error

  - ${{ if eq(variables.stage_type, 'deployment') }}:
    - ${{ if eq(containsValue(parameters.stage.jobs.*.steps.*.task, 'ExpressV2Internal@1'), false) }}:
      - 'Atleast 1 Ev2 task needs to be present in case of deployment stage' : error

    - ${{ if eq(variables.azure_subscription_id, '') }}:
      - 'Atleast one subscription id should be present in a deployment stage' : error
      
  jobs:
    
#We add the Lockbox Approval flow if the stage has a subscription ID added as variable
    - ${{ if eq(variables.stage_type, 'deployment') }}:

      - job: RuntimeCheckForPrimaryArtifacts
        pool:
          name: OneBranchPipelines 
          ${{ if or(eq(variables.cloud_name, 'Public'), eq(variables.cloud_name, 'USSec'), eq(variables.cloud_name, 'USNat')) }}:
            agentPooltype: "M365ComplianceProd"
          ${{ elseif or(eq(variables.cloud_name, 'Gcc'), eq(variables.cloud_name, 'Gcch'), eq(variables.cloud_name, 'Dod')) }}:
            agentPooltype: "M365ComplianceFF"
          ${{ elseif eq(variables.cloud_name, 'Gal') }}:
            agentPooltype: "M365ComplianceMC"
        steps:
        - task: PowerShell@2
          name: TestArtifact
          inputs:
            targetType: 'inline'
            script: |
              #Script to test existence of Primary Artifact alias
              try {
                  Write-Host "`n------- Task Execution Started -------"
                  Write-Host "Checking for PrimaryArtifact in pipeline resources."
                  Write-Host "Primary Artifact runName is:"  $(resources.pipeline.PrimaryArtifact.runName)
                  Write-Host "Primary Artifact runID is:"  $(resources.pipeline.PrimaryArtifact.runID)
              } Catch {
                Write-Host "`n------- Task Execution Error -------------------"
                Write-Host "The Primary Artifact alias has not been defined."
                Write-Host "`n----------------Exception ----------------------"
                throw $_.Exception
              }
      - job: WaitForLockBoxApproval
        dependsOn:
          - RuntimeCheckForPrimaryArtifacts
        pool: server
        steps:
        - task: Delay@1
          name: Lockbox_Approval_Waiting_Task
          inputs:
            delayForMinutes: 30

      - job: DelayLockboxRequestTask
        pool: server
        dependsOn:
          - RuntimeCheckForPrimaryArtifacts
        steps:
        - task: Delay@1
          name: DelayWorkflow
          inputs:
            delayForMinutes: 1

      - job: LockBoxApprovalReq
        pool:
          name: OneBranchPipelines 
          # ${{ if eq(variables.cloud_name, 'Public') }}:
          #   agentPooltype: "M365ComplianceProd"
          agentPooltype: "M365ComplianceProd"
        dependsOn:
          - DelayLockboxRequestTask
        steps:
        - checkout: none
#Adding Dot net framework installation required by the Lockbox Approval Request task
#Will be removed once the agents provisioned have the Dot net framework installated by default
        - task: UseDotNet@2
          name: DotNetDownload
          inputs:
            packageType: 'sdk'
            version: '6.0.x'
#Lockbox Approval Request task
        - task: lockbox-approval-request-prod_with_onebranch@1
          name: LbApprovalRequestTask
          inputs:
            cloud: ${{variables.cloud_name}} # default is 'public'
            subscriptionids: ${{variables.azure_subscription_id}}
            namespaceRingJson: ${{variables.namespace_ring_json}} #Present only in case of cosmic deployments
            targetring: '0' #TargetRing can be later taken as a variable to the stage; 0 represents Global
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            ServiceTreeId: ${{parameters.serviceTreeId}}
            ServiceGroupName: ${{parameters.serviceGroupName}}
  
    - ${{ each job in parameters.stage.jobs }}:
        - ${{ if ne(job.pool.type, 'release') }}:
          - 'Job type pool type ${{ job.pool.type }} is not supported. Supported type: release': error

        - template: ../../Jobs/M365/Release.NonProd.Job.yml
          parameters:
            job: ${{ job }}
            serviceTreeId: ${{parameters.serviceTreeId}}
            serviceGroupName: ${{parameters.serviceGroupName}}
            workload: ${{parameters.workload}}
            cloudName: ${{variables.cloud_name}}
            releaseEnvironment: ${{variables.release_environment}}
            ev2Environment: ${{variables.ev2_environment}}
            phase: ${{variables.phase}}
            serviceType: ${{variables.service_type}}
            stageType: ${{variables.stage_type}}
            azureSubscriptionId: ${{variables.azure_subscription_id}}